// Mocks generated by Mockito 5.4.6 from annotations
// in gardes_app/test/app/modules/doctor/controllers/doctor_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:gardes_app/app/data/models/doctor_model.dart' as _i4;
import 'package:gardes_app/app/data/models/schedule_model.dart' as _i6;
import 'package:gardes_app/app/data/models/service_model.dart' as _i5;
import 'package:gardes_app/app/data/services/auth_service.dart' as _i7;
import 'package:gardes_app/app/data/services/database_service.dart' as _i3;
import 'package:get/get.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:realm/realm.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRx_0<T> extends _i1.SmartFake implements _i2.Rx<T> {
  _FakeRx_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternalFinalCallback_1<T> extends _i1.SmartFake
    implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseService_2 extends _i1.SmartFake
    implements _i3.DatabaseService {
  _FakeDatabaseService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDoctor_3 extends _i1.SmartFake implements _i4.Doctor {
  _FakeDoctor_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeService_4 extends _i1.SmartFake implements _i5.Service {
  _FakeService_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSchedule_5 extends _i1.SmartFake implements _i6.Schedule {
  _FakeSchedule_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i7.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Rx<_i4.Doctor?> get currentUser =>
      (super.noSuchMethod(
            Invocation.getter(#currentUser),
            returnValue: _FakeRx_0<_i4.Doctor?>(
              this,
              Invocation.getter(#currentUser),
            ),
          )
          as _i2.Rx<_i4.Doctor?>);

  @override
  _i2.Rx<_i7.UserRole> get currentRole =>
      (super.noSuchMethod(
            Invocation.getter(#currentRole),
            returnValue: _FakeRx_0<_i7.UserRole>(
              this,
              Invocation.getter(#currentRole),
            ),
          )
          as _i2.Rx<_i7.UserRole>);

  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(Invocation.getter(#isLoggedIn), returnValue: false)
          as bool);

  @override
  bool get isAdminLoggedIn =>
      (super.noSuchMethod(
            Invocation.getter(#isAdminLoggedIn),
            returnValue: false,
          )
          as bool);

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_1<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_1<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i8.Future<bool> login(String? login, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [login, password]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  void logout() => super.noSuchMethod(
    Invocation.method(#logout, []),
    returnValueForMissingStub: null,
  );

  @override
  bool canManageDoctors() =>
      (super.noSuchMethod(
            Invocation.method(#canManageDoctors, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canManageServices() =>
      (super.noSuchMethod(
            Invocation.method(#canManageServices, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canGenerateSchedules() =>
      (super.noSuchMethod(
            Invocation.method(#canGenerateSchedules, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canEditUnavailability() =>
      (super.noSuchMethod(
            Invocation.method(#canEditUnavailability, []),
            returnValue: false,
          )
          as bool);

  @override
  bool canViewSchedules() =>
      (super.noSuchMethod(
            Invocation.method(#canViewSchedules, []),
            returnValue: false,
          )
          as bool);

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_1<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_1<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i8.Future<_i3.DatabaseService> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i8.Future<_i3.DatabaseService>.value(
              _FakeDatabaseService_2(this, Invocation.method(#init, [])),
            ),
          )
          as _i8.Future<_i3.DatabaseService>);

  @override
  List<_i4.Doctor> getAllDoctors() =>
      (super.noSuchMethod(
            Invocation.method(#getAllDoctors, []),
            returnValue: <_i4.Doctor>[],
          )
          as List<_i4.Doctor>);

  @override
  _i4.Doctor? getDoctor(_i9.ObjectId? id) =>
      (super.noSuchMethod(Invocation.method(#getDoctor, [id])) as _i4.Doctor?);

  @override
  _i4.Doctor createDoctor({
    required String? nom,
    required String? prenom,
    required String? login,
    required String? password,
    bool? isAnesthesiste = false,
    bool? isPediatrique = false,
    bool? isSamu = false,
    bool? isIntensiviste = false,
    List<String>? joursIndisponibles = const [],
    int? maxGardesParMois = 5,
    int? joursMinEntreGardes = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createDoctor, [], {
              #nom: nom,
              #prenom: prenom,
              #login: login,
              #password: password,
              #isAnesthesiste: isAnesthesiste,
              #isPediatrique: isPediatrique,
              #isSamu: isSamu,
              #isIntensiviste: isIntensiviste,
              #joursIndisponibles: joursIndisponibles,
              #maxGardesParMois: maxGardesParMois,
              #joursMinEntreGardes: joursMinEntreGardes,
            }),
            returnValue: _FakeDoctor_3(
              this,
              Invocation.method(#createDoctor, [], {
                #nom: nom,
                #prenom: prenom,
                #login: login,
                #password: password,
                #isAnesthesiste: isAnesthesiste,
                #isPediatrique: isPediatrique,
                #isSamu: isSamu,
                #isIntensiviste: isIntensiviste,
                #joursIndisponibles: joursIndisponibles,
                #maxGardesParMois: maxGardesParMois,
                #joursMinEntreGardes: joursMinEntreGardes,
              }),
            ),
          )
          as _i4.Doctor);

  @override
  void updateDoctor(_i4.Doctor? doctor) => super.noSuchMethod(
    Invocation.method(#updateDoctor, [doctor]),
    returnValueForMissingStub: null,
  );

  @override
  void deleteDoctor(_i4.Doctor? doctor) => super.noSuchMethod(
    Invocation.method(#deleteDoctor, [doctor]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i5.Service> getAllServices() =>
      (super.noSuchMethod(
            Invocation.method(#getAllServices, []),
            returnValue: <_i5.Service>[],
          )
          as List<_i5.Service>);

  @override
  _i5.Service? getService(_i9.ObjectId? id) =>
      (super.noSuchMethod(Invocation.method(#getService, [id]))
          as _i5.Service?);

  @override
  _i5.Service createService({
    required String? nom,
    bool? requiresAnesthesiste = false,
    bool? requiresPediatrique = false,
    bool? requiresSamu = false,
    bool? requiresIntensiviste = false,
    List<String>? joursBloquees,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createService, [], {
              #nom: nom,
              #requiresAnesthesiste: requiresAnesthesiste,
              #requiresPediatrique: requiresPediatrique,
              #requiresSamu: requiresSamu,
              #requiresIntensiviste: requiresIntensiviste,
              #joursBloquees: joursBloquees,
            }),
            returnValue: _FakeService_4(
              this,
              Invocation.method(#createService, [], {
                #nom: nom,
                #requiresAnesthesiste: requiresAnesthesiste,
                #requiresPediatrique: requiresPediatrique,
                #requiresSamu: requiresSamu,
                #requiresIntensiviste: requiresIntensiviste,
                #joursBloquees: joursBloquees,
              }),
            ),
          )
          as _i5.Service);

  @override
  void updateService(_i5.Service? service) => super.noSuchMethod(
    Invocation.method(#updateService, [service]),
    returnValueForMissingStub: null,
  );

  @override
  void deleteService(_i5.Service? service) => super.noSuchMethod(
    Invocation.method(#deleteService, [service]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i6.Schedule> getAllSchedules() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSchedules, []),
            returnValue: <_i6.Schedule>[],
          )
          as List<_i6.Schedule>);

  @override
  List<_i6.Schedule> getSchedulesByMonth(int? year, int? month) =>
      (super.noSuchMethod(
            Invocation.method(#getSchedulesByMonth, [year, month]),
            returnValue: <_i6.Schedule>[],
          )
          as List<_i6.Schedule>);

  @override
  List<_i6.Schedule> getSchedulesByService(
    _i5.Service? service,
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSchedulesByService, [service, year, month]),
            returnValue: <_i6.Schedule>[],
          )
          as List<_i6.Schedule>);

  @override
  List<_i6.Schedule> getSchedulesByDoctor(_i4.Doctor? doctor) =>
      (super.noSuchMethod(
            Invocation.method(#getSchedulesByDoctor, [doctor]),
            returnValue: <_i6.Schedule>[],
          )
          as List<_i6.Schedule>);

  @override
  _i6.Schedule createSchedule({
    required _i4.Doctor? doctor,
    required _i5.Service? service,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createSchedule, [], {
              #doctor: doctor,
              #service: service,
              #date: date,
            }),
            returnValue: _FakeSchedule_5(
              this,
              Invocation.method(#createSchedule, [], {
                #doctor: doctor,
                #service: service,
                #date: date,
              }),
            ),
          )
          as _i6.Schedule);

  @override
  void updateSchedule(_i6.Schedule? schedule) => super.noSuchMethod(
    Invocation.method(#updateSchedule, [schedule]),
    returnValueForMissingStub: null,
  );

  @override
  void deleteSchedule(_i6.Schedule? schedule) => super.noSuchMethod(
    Invocation.method(#deleteSchedule, [schedule]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Doctor? getDoctorById(_i9.ObjectId? id) =>
      (super.noSuchMethod(Invocation.method(#getDoctorById, [id]))
          as _i4.Doctor?);

  @override
  _i5.Service? getServiceById(_i9.ObjectId? id) =>
      (super.noSuchMethod(Invocation.method(#getServiceById, [id]))
          as _i5.Service?);

  @override
  bool canDoctorWorkInService(_i4.Doctor? doctor, _i5.Service? service) =>
      (super.noSuchMethod(
            Invocation.method(#canDoctorWorkInService, [doctor, service]),
            returnValue: false,
          )
          as bool);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );
}
